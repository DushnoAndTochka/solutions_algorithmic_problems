from typing import List


class Solution(object):
    """
    Ключевое что необходимо понять, так это то, что мы ищем два числа сумма 
    которых равна таргету, а значит если из таргета вычесть число, то нам нужно найти полученное

    Например 
    target = 10, а мы нашли число 7. Значит нам надо еще 3 и тогда сумма 7 и 3 даст нам таргет

    Что бы не бегать по всем числам, мы запоминаем число которое уже 'потрагали' и его индекс.
    Дальше берем разницу между таргет и новым число, и смотрим не находили ли мы этого числа.
    """

    def twoSum(self, nums: List[int], target: int) -> List[int]:
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
            
        # создаем hasm_m для хранения уже встреченных чисел и индексов
        checked = {}
        for i, num in enumerate(nums):
            # берем разность между таргетом и текущем числом, 
            # тем самым получаем число, которого нам не хватает
            any_num = target - num
            if any_num in checked:
                # Если мы его нашли в hash_m, значит мы его встречали раньше.
                #  Значит пора давать ответ
                return list((i, checked[any_num]))
            else:
                # Если не нашли в hash_m, значит его надо запомнить. 
                # Вдруг впереди есть его "пара", которая в сумме и даст таргет.
                checked[num] = i
