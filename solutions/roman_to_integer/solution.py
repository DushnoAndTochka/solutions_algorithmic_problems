class Solution:
    """
    Идея решения построена на стэке.
    В стеке мы храним частичные суммы, так как римские цифры могут то увеличиваться, то уменьшаться.
    Так же не забываем, что разряды идут так же с лева на право

    Если новое число оказалось меньше, значит мы закончили расчет предыдущей частичной суммы("разряда")
        и готовы добавить новое число.
    Если новое число оказалось равное текущему, значит его надо приплюсовать к текущему.
    Если новое число оказалось больше, значит из нового надо вычесть текущее.

    В конце считаем сумму всех частичных сумм и получаем ответ.
    
    Пример:
    s = LVIII
    res = [50]

    входим в цикл
    V -> 5
    50 > 5 Значит с этим "разрядом" мы закончили
    res = [50, 5]
    ----
    I -> 1
    5 > 1 Значит с этим "разрядом" мы закончили
    res = [50, 5, 1]
    ----
    ....
    ----
    res = [50, 5, 3]
    answer = 58

    ----
    s = MCMXCIV
    res = [1000]
    
    входим в цикл
    C -> 100
    1000 > 100 значит смело добавляем
    res = [1000, 100]
    ----
    M -> 1000
    100 < 1000 # значит новое число больше предыдущего и надо проихвести перерасчет
    res = [1000, 900]
    ----
    ....
    ----
    res = [1000, 900, 90, 4]
    answer = 1994
    """

    def roman_to_int(self, s: str) -> int:
        # создаем мапу, которая позволит нам сопоставить римское число, арабскому
        hash_t = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1000
        }
        
        # создаем стэк и закидываем первое число, сразу преобразив его в арабское
        res = [hash_t[s[0]]]
        
        for c in s[1::]:
            if res[-1] > hash_t[c]:
                # если текущее больше нового, значит расчет "разряда" закончен. 
                #   Мы можем начинать расчет следующего.
                res.append(hash_t[c])
            elif res[-1] == hash_t[c]:
                # если равны, то складываем
                res[-1] += res[-1]
            else:
                res[-1] = hash_t[c] - res[-1]
                
        return sum(res)